# -*- coding: utf-8 -*-
"""Microsoft_intern_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3hsTrtCB3KHXjDveflO5Ew6hs53e_Fq
"""

import kagglehub
import os
import pandas as pd

path = kagglehub.dataset_download("equilibriumm/sleep-efficiency")
print("Path to dataset files:", path)

print("Files in dataset:", os.listdir(path))

csv_files = [f for f in os.listdir(path) if f.endswith('.csv')]
print("CSV files found:", csv_files)
csv_files = [f for f in os.listdir(path) if f.endswith('.csv')]
csv_path = os.path.join(path, csv_files[0])

df = pd.read_csv(csv_path)

import numpy as np


import matplotlib.pyplot as plt
import seaborn as sns


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

df.head()

df.info()

# Eksik verilerimi siliyorum modelimin daha verimli olması icin.
df = df.dropna()

df.shape

df.Age.value_counts()

df['Sleep efficiency'].describe()

plt.figure(figsize=(10, 6))
plt.hist(df['Sleep efficiency'], bins=25, alpha=0.7, color='#00d4ff', edgecolor='white')
plt.axvline(df['Sleep efficiency'].mean(), color='#ff0080', linestyle='--', linewidth=2, label=f'Mean: {df["Sleep efficiency"].mean():.3f}')
plt.title('Sleep Efficiency Distribution')
plt.xlabel('Sleep Efficiency')
plt.ylabel('Count')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

# Age vs Sleep efficiency
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.scatter(df['Age'], df['Sleep efficiency'], alpha=0.6, color='#00d4ff')
plt.title('Age vs Sleep Efficiency')
plt.xlabel('Age')
plt.ylabel('Sleep Efficiency')

plt.subplot(1, 3, 2)
df.boxplot(column='Sleep efficiency', by='Gender', ax=plt.gca())
plt.title('Sleep Efficiency by Gender')
plt.suptitle('')

plt.subplot(1, 3, 3)
df.groupby('Gender')['Sleep efficiency'].mean().plot(kind='bar', color=['#ff0080', '#00d4ff'])
plt.title('Average Sleep Efficiency by Gender')
plt.ylabel('Average Sleep Efficiency')
plt.xticks(rotation=0)

plt.tight_layout()
plt.show()

features = ['Age', 'Sleep duration', 'REM sleep percentage', 'Deep sleep percentage',
           'Light sleep percentage', 'Awakenings', 'Caffeine consumption',
           'Alcohol consumption', 'Exercise frequency']

target = 'Sleep efficiency'

# Genderi encode ediyorum.
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Gender_encoded'] = le.fit_transform(df['Gender'])
features.append('Gender_encoded')


X = df[features]
y = df[target]

print(f"Features: {len(features)}")
print(f"Samples: {len(X)}")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

r2 = r2_score(y_test, y_pred)
print(f"R² Score: {r2:.4f}")

# Gercek ve Tahmin edilen.
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.6, color='#00d4ff')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual Sleep Efficiency')
plt.ylabel('Predicted Sleep Efficiency')
plt.title(f'Sleep Efficiency Prediction (R² = {r2:.3f})')
plt.grid(True, alpha=0.3)
plt.show()

# Feature importance
importance = model.feature_importances_
feature_names = X.columns

# Importancelari sırala
importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importance
}).sort_values('Importance', ascending=False)

# Görselleştir
plt.figure(figsize=(10, 6))
plt.barh(importance_df['Feature'], importance_df['Importance'], color='#00d4ff')
plt.xlabel('Importance')
plt.title('Feature Importance - Sleep Efficiency Prediction')
plt.gca().invert_yaxis()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# En önemli 3 feature
print("Top 3 Most Important Features:")
for i in range(3):
    print(f"{i+1}. {importance_df.iloc[i]['Feature']}: {importance_df.iloc[i]['Importance']:.3f}")

# Yeni kullanıcı tahmini
def predict_sleep_quality(age, gender, sleep_duration, rem_pct, deep_pct, light_pct,
                         awakenings, caffeine, alcohol, exercise):

    gender_encoded = 1 if gender.lower() == 'male' else 0

    # Input array oluştur
    user_data = [[age, sleep_duration, rem_pct, deep_pct, light_pct,
                  awakenings, caffeine, alcohol, exercise, gender_encoded]]

    # Tahmin yap
    prediction = model.predict(user_data)[0]

    print(f" User Profile:")
    print(f"Age: {age}, Gender: {gender}")
    print(f"Sleep Duration: {sleep_duration}h")
    print(f"Caffeine: {caffeine}mg")
    print(f"Predicted Sleep Efficiency: {prediction:.3f}")
    print(f"Sleep Quality: {prediction*100:.1f}%")

    return prediction

predict_sleep_quality(age=25, gender='Male', sleep_duration=7.5,
                     rem_pct=25, deep_pct=20, light_pct=55,
                     awakenings=1, caffeine=100, alcohol=0, exercise=3)

predict_sleep_quality(age=40, gender='Male', sleep_duration=6,
                     rem_pct=25, deep_pct=20, light_pct=55,
                     awakenings=1, caffeine=100, alcohol=25, exercise=3)

predict_sleep_quality(age=40, gender='Female', sleep_duration=6,
                     rem_pct=25, deep_pct=20, light_pct=55,
                     awakenings=1, caffeine=100, alcohol=25, exercise=3)

predict_sleep_quality(age=20, gender='Female', sleep_duration=6,
                     rem_pct=25, deep_pct=20, light_pct=55,
                     awakenings=1, caffeine=100, alcohol=25, exercise=3)

